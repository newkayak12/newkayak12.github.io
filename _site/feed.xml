<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>newkayak12.github.io</title>
    <atom:link href="/feed.xml" rel="self" type="application/rss+xml"/>
    <link>http://localhost:4000/</link>
    <description>A website with blog posts and pages</description>
    <pubDate>Tue, 11 Feb 2025 20:07:24 +0900</pubDate>
    
      <item>
        <title>[java Anti Pattern Series] 28.catchandrelease</title>
        <link>/java/anti-pattern/2025/02/11/java-anti-pattern-series-28.CatchAndRelease.html</link>
        <guid isPermaLink="true">/java/anti-pattern/2025/02/11/java-anti-pattern-series-28.CatchAndRelease.html</guid>
        <description>&lt;h1 id=&quot;catch-and-release&quot;&gt;Catch and release&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;예외를 받고 처리 없이 다시 던지거나 무시하는 경우&lt;/li&gt;
  &lt;li&gt;디버깅을 어렵게 한다.&lt;/li&gt;
  &lt;li&gt;근본 원인을 해결하지 않고 예외 처리 방법이 생각이 나지 않는 경우에 빠지기 쉬운 길&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;결과&quot;&gt;결과&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;정보 손실&lt;/li&gt;
  &lt;li&gt;잘못된 디버깅&lt;/li&gt;
  &lt;li&gt;실패 위험 증가&lt;/li&gt;
  &lt;li&gt;성능 저하&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;권장&quot;&gt;권장&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;예외를 적절히 처리하기&lt;/li&gt;
  &lt;li&gt;컨텍스트에 따라 예외 다시 던지기&lt;/li&gt;
  &lt;li&gt;checked exception은 신중하게&lt;/li&gt;
  &lt;li&gt;강력한 오류 처리 구현&lt;/li&gt;
  &lt;li&gt;예외를 철저히 기록&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Tue, 11 Feb 2025 00:00:00 +0900</pubDate>
      </item>
    
      <item>
        <title>[java Anti Pattern Series] 27.throwsexceptionsinfinallyblock</title>
        <link>/java/anti-pattern/2025/02/10/java-anti-pattern-series-27.ThrowsExceptionsInFinallyBlock.html</link>
        <guid isPermaLink="true">/java/anti-pattern/2025/02/10/java-anti-pattern-series-27.ThrowsExceptionsInFinallyBlock.html</guid>
        <description>&lt;h1 id=&quot;throws-exceptions-in-finally-block&quot;&gt;Throws exceptions in finally block&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;finally는 예외 여부와 상관없이 실행되어야만 하는 경우에 사용한다.&lt;/li&gt;
  &lt;li&gt;예를 들어 리소스를 닫는 등의 경우에서 말이다.&lt;/li&gt;
  &lt;li&gt;finally에서 예외를 던지만 예기치 않은 동작이 발생하고 오류 처리가 모호해질 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;이유&quot;&gt;이유&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;원래 예외를 마스킹&lt;/li&gt;
  &lt;li&gt;의도하지 않은 흐름 제어&lt;/li&gt;
  &lt;li&gt;리소스 유출 : finally에서 처리되어야 할 리소스 정리가 되지 않아서 메모리 누수, 잠재적 성능 저하가 발생할 수 있다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;권장&quot;&gt;권장&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;적절한 오류 처리 사용&lt;/li&gt;
  &lt;li&gt;정리 로직, 예외 처리 분리&lt;/li&gt;
  &lt;li&gt;fianlly에서는 단순하게! 리소스 정리 정도만&lt;/li&gt;
  &lt;li&gt;try-catch 중첩 : finally에서 여러 작업을 해야 한다면 차라리 try-catch를 여러 번 쓰자&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Mon, 10 Feb 2025 00:00:00 +0900</pubDate>
      </item>
    
      <item>
        <title>[java Anti Pattern Series] 26.ignoringexception</title>
        <link>/java/anti-pattern/2025/02/09/java-anti-pattern-series-26.IgnoringException.html</link>
        <guid isPermaLink="true">/java/anti-pattern/2025/02/09/java-anti-pattern-series-26.IgnoringException.html</guid>
        <description>&lt;h1 id=&quot;ignoring-exception&quot;&gt;Ignoring Exception&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;예외를 무시하면 예측할 수 없는 동작, 버그 및 보안 취약점이 발생할 수 있으므로 예외를 무시하는 것은 나쁜 습관으로 간주된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;이유&quot;&gt;이유&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;정보 손실&lt;/li&gt;
  &lt;li&gt;정의 되지 않은 동작&lt;/li&gt;
  &lt;li&gt;리소스 유출&lt;/li&gt;
  &lt;li&gt;사용자 경험 저하&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;예시&quot;&gt;예시&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;catch block에서 아무 것도 하지 않는 경우&lt;/li&gt;
  &lt;li&gt;아예 예외 처리를 안 한 경우&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;처리-방안&quot;&gt;처리 방안&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;예외를 최대한 작은 범위로 특정해서 지정&lt;/li&gt;
  &lt;li&gt;Try-Catch-Finally 사용&lt;/li&gt;
  &lt;li&gt;Slf4j를 사용해서 로깅&lt;/li&gt;
  &lt;li&gt;예외를 다른 예외로 변환해서 던지기&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Sun, 09 Feb 2025 00:00:00 +0900</pubDate>
      </item>
    
      <item>
        <title>[java Anti Pattern Series] 25.catchall</title>
        <link>/java/anti-pattern/2025/02/08/java-anti-pattern-series-25.CatchAll.html</link>
        <guid isPermaLink="true">/java/anti-pattern/2025/02/08/java-anti-pattern-series-25.CatchAll.html</guid>
        <description>&lt;h1 id=&quot;catchall&quot;&gt;CatchAll&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;최상위, 추상적 에러로 에러 처리 대상을 선정하는 것은 안티패턴이다.&lt;/li&gt;
  &lt;li&gt;특정 예외를 개별적으로 처리하지 않고 하나의 catch 블록으로 모든 예외를 잡는 방식이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;문제점&quot;&gt;문제점&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;정보 손실 : 에러 타입을 특정할 수 없어진다.&lt;/li&gt;
  &lt;li&gt;정확성 부족 : 예외를 구체적이고 타겟팅된 방식으로 처리할 기회를 박탈당한다.&lt;/li&gt;
  &lt;li&gt;코드 복잡성 : 의미있는 에러처리가 아니게 되므로 불필요한 catch로 코드가 도배될 수 있다.&lt;/li&gt;
  &lt;li&gt;오류 마스킹 : 에러마다 다르게 처리해야하는 경우 오류가 마스킹 될 수 있다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;해결&quot;&gt;해결&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;특정 예외 처리하기&lt;/li&gt;
  &lt;li&gt;catch를 세분화 해서 처리하기&lt;/li&gt;
  &lt;li&gt;에러 변환해서 다시 던지기&lt;/li&gt;
  &lt;li&gt;try-with-resource 사용&lt;/li&gt;
  &lt;li&gt;예외 로깅&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Sat, 08 Feb 2025 00:00:00 +0900</pubDate>
      </item>
    
      <item>
        <title>[java Anti Pattern Series] 24.neglectingtoreleaseresource</title>
        <link>/java/anti-pattern/2025/02/07/java-anti-pattern-series-24.NeglectingToReleaseResource.html</link>
        <guid isPermaLink="true">/java/anti-pattern/2025/02/07/java-anti-pattern-series-24.NeglectingToReleaseResource.html</guid>
        <description>&lt;h1 id=&quot;neglecting-to-release-resource&quot;&gt;Neglecting To Release Resource&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;리소스 해제하지 않는 경우 메모리 누수, 과도한 리소스 낭비, 성능 이슈가 발생할 수 있다.&lt;/li&gt;
  &lt;li&gt;리소스 미사용 시 해제하지 않는 경우 발생한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;원인&quot;&gt;원인&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;이해 부족&lt;/li&gt;
  &lt;li&gt;긴밀한 결합
    &lt;ul&gt;
      &lt;li&gt;리소스 획득, 릴리즈 로직 간 긴밀한 결합이 이뤄진다 이러면 모든 경로에서 리소스가 릴리즈되도록 보장하기가 어려워질 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;예외 처리&lt;/li&gt;
  &lt;li&gt;복잡한 코드
    &lt;ul&gt;
      &lt;li&gt;너무 복잡하면 리소스가 제대로 릴리즈 됐는지 확인하기 어려울 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;영향&quot;&gt;영향&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;메모리 누수&lt;/li&gt;
  &lt;li&gt;리소스 고갈&lt;/li&gt;
  &lt;li&gt;성능 저하&lt;/li&gt;
  &lt;li&gt;보안 취약점&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;해결&quot;&gt;해결&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;try-with-resource 사용&lt;/li&gt;
  &lt;li&gt;리소스 획득, 릴리즈 로직을 분리&lt;/li&gt;
  &lt;li&gt;리소스 사용량 모니터링&lt;/li&gt;
  &lt;li&gt;finally 등을 사용해서 닫거나 권장하는 사용법을 지키기 ( 명시적으로 리소스 해제 등 )&lt;/li&gt;
  &lt;li&gt;&lt;del&gt;finalizer를 사용해서 닫기&lt;/del&gt; -&amp;gt; GC에서 처리될 때 호출할 수 있지만 언제 호출될지는 모른다. 추가적으로 finalizer 자체가 &lt;strong&gt;객체 재생성 공격&lt;/strong&gt; 등에 취약하다.&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Fri, 07 Feb 2025 00:00:00 +0900</pubDate>
      </item>
    
      <item>
        <title>[java Anti Pattern Series] 23.prematureresourcerelease</title>
        <link>/java/anti-pattern/2025/02/06/java-anti-pattern-series-23.PrematureResourceRelease.html</link>
        <guid isPermaLink="true">/java/anti-pattern/2025/02/06/java-anti-pattern-series-23.PrematureResourceRelease.html</guid>
        <description>&lt;h1 id=&quot;premature-resource-release&quot;&gt;Premature Resource Release&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;메모리 누수 방지, 성능 향상을 위해서 리소스를 적절히 관리하는게 중요하다.&lt;/li&gt;
  &lt;li&gt;적절한 타이밍에 리소스 반환을 하면 좋지만 너무 이르게 하면 문제가 될 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;조기-해제란&quot;&gt;조기 해제란?&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;의도한 용도가 완료되기 전에 리소스를 닫거나 릴리즈하는 행위&lt;/li&gt;
  &lt;li&gt;로직의 오류, 잘못된 설계&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;결과&quot;&gt;결과&lt;/h2&gt;
&lt;h3 id=&quot;1-리소스-유출&quot;&gt;1. 리소스 유출&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;리소스를 제대로 닫거나 해제하지 않으면 메모리에 잔존해서 메모리 누수가 될 수 있다.&lt;/li&gt;
  &lt;li&gt;처음엔 괜찮지만 쌓여서 결국 애플리케이션 크래시가 된다.
    &lt;h3 id=&quot;2-리소스-고갈&quot;&gt;2. 리소스 고갈&lt;/h3&gt;
  &lt;/li&gt;
  &lt;li&gt;조기 종료되면 다른 부분에서 해당 리소스에 액세스할 수 없게 되어 경합 및 교착이 된다.
    &lt;h3 id=&quot;3-데이터-손상&quot;&gt;3. 데이터 손상&lt;/h3&gt;
  &lt;/li&gt;
  &lt;li&gt;조기 해제하면 데이터가 손상될 수 있다.
    &lt;h3 id=&quot;4-일관되지-않은-상태&quot;&gt;4. 일관되지 않은 상태&lt;/h3&gt;
  &lt;/li&gt;
  &lt;li&gt;예측할 수 없는 동작이 발생할 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;해결책&quot;&gt;해결책&lt;/h2&gt;
&lt;h3 id=&quot;1-try-with-resource&quot;&gt;1. try-with-resource&lt;/h3&gt;
&lt;h3 id=&quot;2-finally-사용&quot;&gt;2. finally 사용&lt;/h3&gt;
&lt;h3 id=&quot;3-열기닫기-원칙-따르기&quot;&gt;3. 열기·닫기 원칙 따르기&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;리소스가 더 이상 필요하지 않을 때만 공개해야 하며, 너무 일찍 공개하면 안된다.
    &lt;h3 id=&quot;4-resource-pool-사용&quot;&gt;4. resource-pool 사용&lt;/h3&gt;
  &lt;/li&gt;
  &lt;li&gt;생성, 해제에 큰 비용이 드는 경우 풀로 두고 사용하면 유리하다.
    &lt;h3 id=&quot;5-rcreferencecounting-사용&quot;&gt;5. RC(ReferenceCounting) 사용&lt;/h3&gt;
  &lt;/li&gt;
  &lt;li&gt;참조 횟수를 기록하여 수가 0이 될 떄까지 가지고 있다가 해제&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 06 Feb 2025 00:00:00 +0900</pubDate>
      </item>
    
      <item>
        <title>[java Anti Pattern Series] 22.resourcehog</title>
        <link>/java/anti-pattern/2025/02/05/java-anti-pattern-series-22.ResourceHog.html</link>
        <guid isPermaLink="true">/java/anti-pattern/2025/02/05/java-anti-pattern-series-22.ResourceHog.html</guid>
        <description>&lt;h1 id=&quot;resource-hog&quot;&gt;Resource Hog&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;메모리, CPU 또는 네트워크 대역폭과 같은 리소스를 과도하게 사용하는 경우&lt;/li&gt;
  &lt;li&gt;필요 이상으로 많은 리소스를 사용하여 성능이 최적화되지 않고 잠재적인 시스템 충돌일 일으킬 때 발생&lt;/li&gt;
  &lt;li&gt;일반적으로 필요 이상의 메모리 또는 처리 능력을 필요로 하는 비효율적인 알고리즘이나 데이터 구조를 사용할 때 발생한다.&lt;/li&gt;
  &lt;li&gt;비효율적인 DB Query 또는 네트워크 호출도 리소스 호깅의 원인이 될 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;증상&quot;&gt;증상&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;높은 메모리 사용량(OOM)&lt;/li&gt;
  &lt;li&gt;높은 CPU사용율&lt;/li&gt;
  &lt;li&gt;과도한 네트워크 트래픽&lt;/li&gt;
  &lt;li&gt;긴 응답 시간&lt;/li&gt;
  &lt;li&gt;시스템 충돌&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;원인&quot;&gt;원인&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;비효율적 알고리즘&lt;/li&gt;
  &lt;li&gt;메모리 누수&lt;/li&gt;
  &lt;li&gt;장기 실행 DB Query&lt;/li&gt;
  &lt;li&gt;네트워크 비효율성&lt;/li&gt;
  &lt;li&gt;동시성 문제&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;완화책&quot;&gt;완화책&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;알고리즘 및 데이터 구조 최적화&lt;/li&gt;
  &lt;li&gt;리소스 사용량 모니터링&lt;/li&gt;
  &lt;li&gt;리소스 관리 구현&lt;/li&gt;
  &lt;li&gt;캐싱 및 버퍼링&lt;/li&gt;
  &lt;li&gt;DB Query 최적화&lt;/li&gt;
  &lt;li&gt;동시성 제한&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Wed, 05 Feb 2025 00:00:00 +0900</pubDate>
      </item>
    
      <item>
        <title>[java Anti Pattern Series] 21.lockingtoread</title>
        <link>/java/anti-pattern/2025/02/04/java-anti-pattern-series-21.LockingToRead.html</link>
        <guid isPermaLink="true">/java/anti-pattern/2025/02/04/java-anti-pattern-series-21.LockingToRead.html</guid>
        <description>&lt;h1 id=&quot;locking-to-read&quot;&gt;Locking To Read&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;공유 리소스에 대한 읽기 작업을 보호하기 위해서 잠금을 사용하는 것을 의미한다.&lt;/li&gt;
  &lt;li&gt;멀티쓰레드 환경에서 데이터 일관성르 보장하고 경쟁 조건 방지하기 위해서 사용된다.&lt;/li&gt;
  &lt;li&gt;읽기 작업에 불필요하게 잠금을 하면 병목 포인트가 된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;문제점&quot;&gt;문제점&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;읽기 잠금을 획득하면 다른 쓰레드에서 해당 리소스를 읽지 못한다.&lt;/li&gt;
  &lt;li&gt;불필요한 경합으로 직렬화되면 성능이 저하되고 지연 시간이 늘어날 수 있다.&lt;/li&gt;
  &lt;li&gt;올바르게 구현하지 않으면 교착 상태가 발생할 수도 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;동시성 감소&lt;/li&gt;
    &lt;li&gt;잠재적 교착 상태&lt;/li&gt;
    &lt;li&gt;오버헤드&lt;/li&gt;
    &lt;li&gt;코드 복잡성&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;대체-접근-방식&quot;&gt;대체 접근 방식&lt;/h2&gt;
&lt;h3 id=&quot;읽기쓰기-잠금&quot;&gt;읽기·쓰기 잠금&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;읽기/쓰기 잠금은 여러 쓰레드가 동시에 리소스를 읽으면서 동시에 쓰기 전용 액세스를 보장하는 동기화 메커니즘&lt;/li&gt;
  &lt;li&gt;이를 통해서 작업 성능 향상을 할 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;불변-데이터-사용&quot;&gt;불변 데이터 사용&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;대안으로 불변 데이터를 사용한다.&lt;/li&gt;
  &lt;li&gt;수정할 수 없으므로 쓰레드에 안전하다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;캐싱&quot;&gt;캐싱&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;자주 액세스하는 데이터를 메모리에 캐싱해서 공유 리소스에 대한 읽기 작업 접근 횟수를 최소화할 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;ReadWriteLock&lt;/li&gt;
    &lt;li&gt;불변 데이터 구조&lt;/li&gt;
    &lt;li&gt;휘방성 변수 : 자주 읽지만 거의 수정하지 않는 단순한 변수를 다룰 때 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;volatile&lt;/code&gt;을 사용하면 잠금 없이도 쓰레드 전체에 변경 사항을 확인할 수 있다.&lt;/li&gt;
    &lt;li&gt;더 높은 수준의 동기화 메커니즘 : 원자 변수, 동시 컬렉션, CountDownLatch, CyclicBarrier 등&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;개선안&quot;&gt;개선안&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;세분화된 잠금 사용&lt;/li&gt;
  &lt;li&gt;읽기 최적화&lt;/li&gt;
  &lt;li&gt;중첩 잠금 피하기&lt;/li&gt;
  &lt;li&gt;잠금 경합을 모니터링&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;ol&gt;
    &lt;li&gt;공유 데이터를 읽기 위해서 잠금이 사용되는 코드 섹션 식별&lt;/li&gt;
    &lt;li&gt;데이터 액세스 패턴을 평가하고 읽기가 쓰기보다 많은지 확인&lt;/li&gt;
    &lt;li&gt;여러 쓰레드가 동시에 공유 데이터를 읽을 수 있도록 독점 잠금을 ReadWriteLock으로 대체&lt;/li&gt;
    &lt;li&gt;공유 데이터를 변경 불가하게 만들거나 자바 동시성 유틸리티에서 제공하는 상위 수준의 동기화 메커니즘을 사용하도록 코드 리펙토링&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;h3 id=&quot;읽기-잠금을-피하려면&quot;&gt;읽기 잠금을 피하려면?&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;ConcurrentHashMap&lt;/li&gt;
    &lt;li&gt;CopyOnWriteArrayList&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Tue, 04 Feb 2025 00:00:00 +0900</pubDate>
      </item>
    
      <item>
        <title>[java Anti Pattern Series] 20.inappropriateintimacy</title>
        <link>/java/anti-pattern/2025/02/03/java-anti-pattern-series-20.InappropriateIntimacy.html</link>
        <guid isPermaLink="true">/java/anti-pattern/2025/02/03/java-anti-pattern-series-20.InappropriateIntimacy.html</guid>
        <description>&lt;h1 id=&quot;inappropriate-intimacy&quot;&gt;Inappropriate Intimacy&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;두 클래스가 긴밀하게 얽혀 있어 높은 의존성을 초래하는 경우를 의미한다.&lt;/li&gt;
  &lt;li&gt;코드 재사용성 감소, 복잡성 증가, 코드 유지 관리 및 테스트의 어려움이 발생&lt;/li&gt;
  &lt;li&gt;비공개 필드 및 메소드에 대한 직접 액세스, 내부 상태 공유, 클래스 간 과도한 메소드 호출 등 다양한 형태로 발생&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;원인&quot;&gt;원인&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;추상화 : 서로의 내부 정보에 직접 액세스 하는 것은 추상화 및 캡슐화가 부족하다는 것을 의미한다.&lt;/li&gt;
  &lt;li&gt;잘못된 디자인 결정 : 긴밀한 협력에 대한 영향도를 고려하지 않아서 발생&lt;/li&gt;
  &lt;li&gt;디자인 패턴에 대한 이해 부족 : 의존성 주입, 옵저버 등에 익숙하지 않을 경우 긴밀한 결합을 초래할 수 있다.&lt;/li&gt;
  &lt;li&gt;레거시&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;영향도&quot;&gt;영향도&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;코드 재사용성 감소&lt;/li&gt;
  &lt;li&gt;복잡성 증가&lt;/li&gt;
  &lt;li&gt;테스트의 어려움&lt;/li&gt;
  &lt;li&gt;제한된 확장성&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;친밀성을-피하거나-완화하는-방법&quot;&gt;친밀성을 피하거나 완화하는 방법&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;디자인 패턴 적용 ( 파사드, 옵저버 등 )&lt;/li&gt;
  &lt;li&gt;동작을 캡슐화&lt;/li&gt;
  &lt;li&gt;인터페이스를 사용&lt;/li&gt;
  &lt;li&gt;IOC를 구현&lt;/li&gt;
  &lt;li&gt;리팩토링&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Mon, 03 Feb 2025 00:00:00 +0900</pubDate>
      </item>
    
      <item>
        <title>[java Anti Pattern Series] 19.circularreference</title>
        <link>/java/anti-pattern/2025/02/02/java-anti-pattern-series-19.CircularReference.html</link>
        <guid isPermaLink="true">/java/anti-pattern/2025/02/02/java-anti-pattern-series-19.CircularReference.html</guid>
        <description>&lt;h1 id=&quot;circular-reference&quot;&gt;Circular reference&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;두 개 이상의 클래스가 직간접적으로 서로 의존하는 경우&lt;/li&gt;
  &lt;li&gt;서로 참조 루프를 생성하는 방식&lt;/li&gt;
  &lt;li&gt;서로의 의존성이 강할 때 발생한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;문제점&quot;&gt;문제점&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;긴밀한 결합&lt;/li&gt;
  &lt;li&gt;유지보수의 어려움&lt;/li&gt;
  &lt;li&gt;테스트 가능성 저하&lt;/li&gt;
  &lt;li&gt;복잡성 증가&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;피하기-위한-전략&quot;&gt;피하기 위한 전략&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;의존성 주입&lt;/li&gt;
  &lt;li&gt;SRP 적용&lt;/li&gt;
  &lt;li&gt;인터페이스 또는 추상 클래스 사용&lt;/li&gt;
  &lt;li&gt;코드 베이스 리팩토링&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;해결&quot;&gt;해결&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;순환 종속성 끊기&lt;/li&gt;
  &lt;li&gt;중개자 클래스 도입&lt;/li&gt;
  &lt;li&gt;IOC 원칙 적용&lt;/li&gt;
  &lt;li&gt;클래스 분리&lt;/li&gt;
  &lt;li&gt;점진적 리팩토링&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Sun, 02 Feb 2025 00:00:00 +0900</pubDate>
      </item>
    
      <item>
        <title>[java Anti Pattern Series] 18.classdoestoomuch</title>
        <link>/java/anti-pattern/2025/02/01/java-anti-pattern-series-18.ClassDoesTooMuch.html</link>
        <guid isPermaLink="true">/java/anti-pattern/2025/02/01/java-anti-pattern-series-18.ClassDoesTooMuch.html</guid>
        <description>&lt;h1 id=&quot;class-does-too-much&quot;&gt;Class Does Too Much&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;한 클래스가 너무 많은 일을 담당하는 것&lt;/li&gt;
  &lt;li&gt;SRP를 위반할 때 발생&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;결과&quot;&gt;결과&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;높은 복잡성&lt;/li&gt;
  &lt;li&gt;높은 결합도&lt;/li&gt;
  &lt;li&gt;유지 보수의 어려움&lt;/li&gt;
  &lt;li&gt;진한 코드 냄새&lt;/li&gt;
  &lt;li&gt;낮은 확장성&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;식별하기&quot;&gt;식별하기&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;메소드 수가 너무 많다 : 그만큼 많은 일을 하고 있다는 의미가 된다.&lt;/li&gt;
  &lt;li&gt;높은 복잡성 : 주기적 복잡성이 높고 메소드가 길며 상속 계층 구조가 깊은 클래스&lt;/li&gt;
  &lt;li&gt;다중 책임 : 한 클래스에 서로 관련 없는 여러 작업을 담당하고 있는 경우&lt;/li&gt;
  &lt;li&gt;잘못된 캡슐화 : 너무 많은 공개 메소드와 변수를 노출하는 경우&lt;/li&gt;
  &lt;li&gt;응집성 부족 : 클래스에 서로 다른 데이터 집합에서 작동하거나 관련 없는 기능을 가진 메소드가 있다면 너무 많은 일을 하고 있는 것&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;리팩토리-전략&quot;&gt;리팩토리 전략&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;책임 소재 파악하기&lt;/li&gt;
  &lt;li&gt;구성 활용 : 컴포지션으로 더 작고 집중적인 클래스를 결합하여 원하는 기능을 달성&lt;/li&gt;
  &lt;li&gt;메소드 추출 : 복잡한 메소드를 더 작고 관리하기 작은 단위로 분해&lt;/li&gt;
  &lt;li&gt;클래스 추출 : 여러 책임이 있는 경우 책임들을 별도 클래스로 추출&lt;/li&gt;
  &lt;li&gt;디자인 패턴 적용&lt;/li&gt;
  &lt;li&gt;긴메소드 리팩토링 : 긴 메소드가 있다면 SRP를 따르느 더 작은 집중적인 메소드로 제공&lt;/li&gt;
  &lt;li&gt;SOLID 원칙 적용&lt;/li&gt;
  &lt;li&gt;TDD : 리팩토링을 진행하면서 원하는 기능을 유지하는지 테스트를 작성&lt;/li&gt;
  &lt;li&gt;코드 리뷰&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Sat, 01 Feb 2025 00:00:00 +0900</pubDate>
      </item>
    
      <item>
        <title>[java Anti Pattern Series] 17.godclass</title>
        <link>/java/anti-pattern/2025/01/31/java-anti-pattern-series-17.GodClass.html</link>
        <guid isPermaLink="true">/java/anti-pattern/2025/01/31/java-anti-pattern-series-17.GodClass.html</guid>
        <description>&lt;h1 id=&quot;god-class&quot;&gt;God class&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;갓 클래스는 너무 많은 책임을 맡고 지나치게 복잡해져서 이해, 테스트 및 유지가 어려운 클래스&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;특징&quot;&gt;특징&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;높은 복잡성 : 순환 복잡성이 높은 경향이 있으며, 이는 코드를 통과하는 경로가 많다는 것을 의미&lt;/li&gt;
  &lt;li&gt;응집성 부족 : 종종 서로 관련 없는 기능을 하나의 클래스로 결합하여 응집성이 부족&lt;/li&gt;
  &lt;li&gt;비대한 크기 : 코드 줄, 메소드 및 필드 수가 많음&lt;/li&gt;
  &lt;li&gt;경직된 디자인 : 유연성이 떨어지고 수정하거나 확장하기가 어려움&lt;/li&gt;
  &lt;li&gt;테스트 가능성이 낮음 : 복잡해서 테스트 하기가 어렵다.&lt;/li&gt;
  &lt;li&gt;코드 냄새 : 긴 메소드, 과도한 주석, 중복 코드 등 악취를 풍긴다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;안티-패턴인-이유&quot;&gt;안티 패턴인 이유&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;SRP 위반&lt;/li&gt;
  &lt;li&gt;낮은 응집성&lt;/li&gt;
  &lt;li&gt;유연성 저하&lt;/li&gt;
  &lt;li&gt;테스트 하기 어려움&lt;/li&gt;
  &lt;li&gt;낮은 코드 품질&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;리팩토핑&quot;&gt;리팩토핑&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;책임 소재를 명확하게 하기 : 책임을 구분하고 이를 바탕으로 분리한다.&lt;/li&gt;
  &lt;li&gt;메소드 추출 : 복잡성을 줄이고 가독성을 향상시키는 방법&lt;/li&gt;
  &lt;li&gt;클래스 분할 : 더 작고 책임이 명확하게 분리하기&lt;/li&gt;
  &lt;li&gt;디자인 패턴 사용 : Factory, Observer 등 코드 베이스를 모듈화하고 단순화&lt;/li&gt;
  &lt;li&gt;데이터 캡슐화 : 데이터가 클래스 전반에 걸쳐 흩어져 있기에 결합이 단단하고 유연성이 떨어진다.&lt;/li&gt;
  &lt;li&gt;기능 모듈화 : 작은 단위로 모듈화하고 세분화한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;유지-보수&quot;&gt;유지 보수&lt;/h2&gt;
&lt;h3 id=&quot;1tdd&quot;&gt;1.TDD&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;변경으로 인해 퇴행이나 의도하지 않은 부작용이 발생하지 않도록 도움을 줄 수 있다.
    &lt;h3 id=&quot;2-지속적인-리팩토링&quot;&gt;2. 지속적인 리팩토링&lt;/h3&gt;
  &lt;/li&gt;
  &lt;li&gt;변화에 따라 지속적으로 수행&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 31 Jan 2025 00:00:00 +0900</pubDate>
      </item>
    
      <item>
        <title>[java Anti Pattern Series] 16.anemicdomainmodel</title>
        <link>/java/anti-pattern/2025/01/30/java-anti-pattern-series-16.AnemicDomainModel.html</link>
        <guid isPermaLink="true">/java/anti-pattern/2025/01/30/java-anti-pattern-series-16.AnemicDomainModel.html</guid>
        <description>&lt;h1 id=&quot;anemic-domain-model&quot;&gt;Anemic Domain Model&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;도메인 객체에 동작이 거의 또는 포함되지 않고 있고 대부분의 비즈니스 로직이 별도의 서비스 또는 관리자 클래스에서 구현되는 안티패턴이다.&lt;/li&gt;
  &lt;li&gt;도메인 객체가 수동적인 데이터 구조로, 해당 객체와 연관되어야 하는 동작이 없는 애플리케이션 아키텍쳐가 생성된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;1-빈약한-도메인-모델&quot;&gt;1. 빈약한 도메인 모델&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;도메인 객체에 동작이 없고 대신 상태를 저장하는 단순한 데이터 구조로 사용되는 아티 패턴이다.&lt;/li&gt;
  &lt;li&gt;동작과 데이터를 객체 안에 컵슐화 해야하는 객체 지향 프로그래밍의 기본 원칙에 위배된다.&lt;/li&gt;
  &lt;li&gt;보통 이런 객체는 getter, setter만 포함한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;2-의미&quot;&gt;2. 의미&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;객체 지향 원칙 위반 : 동작, 데이터를 분리함으로써 객체 지향 프로그래밍 원칙을 위반한다.&lt;/li&gt;
  &lt;li&gt;코드 중복 : 비즈니스 로직이 별도의 서비스 클래스로 구현되기 때문에 여러 서비스 간의 코드가 중복될 가능성이 높다.&lt;/li&gt;
  &lt;li&gt;낮은 응집성 : 도메인 객체는 동작이 없는 단순한 데이터 컨테이너가 되어 클래스 내 응집성이 낮아진다.&lt;/li&gt;
  &lt;li&gt;제한된 캡슐화 : 동작과 데이터가 분리되어 있기에 캡슐화가 손상된다.&lt;/li&gt;
  &lt;li&gt;테스트의 어려움 : 동작이 없기에 비즈니스 로직 테스트가 어렵다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;3-의미있는-모델&quot;&gt;3. 의미있는 모델&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;리치 도메인 모델 : 도메인 객체가 동작과 데이터를 모두 캡슐화하는 풍부한 도메인 모델을 추구&lt;/li&gt;
  &lt;li&gt;DDD : 도메인 주도 설계 원칙을 채택하면 풍부한 도메인 객체를 만드는데 도움이 된다. 도메인 로직에 초점을 맞추고 도메인 객체 내에서 모델링함으로써 DDD는 소프트웨어 개발에 대한 보다 전체적인 접근 방식을 장려&lt;/li&gt;
  &lt;li&gt;디자인 패턴 : strategy, factoryMethod, command 등과 같은 디자인 패턴을 활용해서 객체 내 동작을 캡슐화&lt;/li&gt;
  &lt;li&gt;서비스 계층 리펙토링 : 상속 대신 객체 구성을 강조하여 복잡한 도메인 모델을 구축&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Thu, 30 Jan 2025 00:00:00 +0900</pubDate>
      </item>
    
      <item>
        <title>[java Anti Pattern Series] 15.emptytrycatch</title>
        <link>/java/anti-pattern/2025/01/29/java-anti-pattern-series-15.EmptyTryCatch.html</link>
        <guid isPermaLink="true">/java/anti-pattern/2025/01/29/java-anti-pattern-series-15.EmptyTryCatch.html</guid>
        <description>&lt;h1 id=&quot;빈-catch-블록&quot;&gt;빈 Catch 블록&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;빈 catch는 오류르 숨기고, 디버깅을 더 어렵게하고, 예기치 않은 동작을 유발하는 등 여러 가지 부정적인 결과를 초래할 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;문제-이유&quot;&gt;문제 이유&lt;/h2&gt;
&lt;h3 id=&quot;1-오류-은닉&quot;&gt;1. 오류 은닉&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;catch는 기본적으로 오류를 기록하거나 exception 메시지를 내보이는 식으로 작동하길 예상한다.&lt;/li&gt;
  &lt;li&gt;즉 책임이 있다.
    &lt;h3 id=&quot;2-디버깅의-어려움&quot;&gt;2. 디버깅의 어려움&lt;/h3&gt;
  &lt;/li&gt;
  &lt;li&gt;stackTrace로 오류 이유를 알아야 하지만 빈 catch는 뭐가 잘못 됐는지 알 방법이 없어진다.
    &lt;h3 id=&quot;3-자바에서-권장하는-오류-처리-미준수&quot;&gt;3. 자바에서 권장하는 오류 처리 미준수&lt;/h3&gt;
  &lt;/li&gt;
  &lt;li&gt;결과적으로 오류 처리 모범 사례에도 위반된다.&lt;/li&gt;
  &lt;li&gt;예외 처리를 바로 하거나 빠르게 실패 처리를 하라는 원칙에 위배된다.
    &lt;h3 id=&quot;4-예외-억제&quot;&gt;4. 예외 억제&lt;/h3&gt;
    &lt;h3 id=&quot;5-예측할-수-없는-동작으로-이어짐&quot;&gt;5. 예측할 수 없는 동작으로 이어짐&lt;/h3&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;처리-방법&quot;&gt;처리 방법&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;예외 로그: slf4j 등으로 예외를 로깅한다.&lt;/li&gt;
  &lt;li&gt;예외 다시 던지기 : 경우에 따라 핸들링할 수 있는 에러로 다시 던지는 식으로 변경할 수도 있다.&lt;/li&gt;
  &lt;li&gt;예외 처리 : 아예 깔끔하게 그 안에서 처리하는게 가장 좋다.&lt;/li&gt;
  &lt;li&gt;checked Exception 사용 : 아니면 로직 자체적으로 예외를 명시하여 사용자로 하여금 예외 처리까지 하도록 하는 방법이 있다.&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Wed, 29 Jan 2025 00:00:00 +0900</pubDate>
      </item>
    
      <item>
        <title>[java Anti Pattern Series] 14.threadstarvation</title>
        <link>/java/anti-pattern/2025/01/28/java-anti-pattern-series-14.ThreadStarvation.html</link>
        <guid isPermaLink="true">/java/anti-pattern/2025/01/28/java-anti-pattern-series-14.ThreadStarvation.html</guid>
        <description>&lt;h1 id=&quot;thread-starvation&quot;&gt;Thread starvation&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;특정 쓰레드가 공유 리소스를 장시간 보유하는 다른 쓰레드로 인해 공유 리소스에 접근하지 못하고 성능이 저하되고 교착상태까지 발생할 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;원인&quot;&gt;원인&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;Blocking&lt;/li&gt;
  &lt;li&gt;Deadlock&lt;/li&gt;
  &lt;li&gt;동기화 불량: 부적절한 동기화는 동시성 제어 메커니즘을 사용해서 동기화되지 않으면 동시에 액세스해서 충돌이 일어날 수 있다.&lt;/li&gt;
  &lt;li&gt;불충분한 쓰레드 풀 구성: 쓰레드 풀을 너무 작거나 큐를 적게 잡으면 가용 쓰레드를 기다리면서 쓰레드 고갈이 생길 수 있다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;감지&quot;&gt;감지&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;높은 CPU 사용량 : 쓰레드가 리소스, 컨텍스트 스위칭을 위해서 지속적으로 경쟁하기에 사용량이 비정상적으로 높아진다.&lt;/li&gt;
  &lt;li&gt;유난히 긴 응답시간 : 특히 Blocking 작업이 느려지면 쓰레드 고갈로 이어진다.&lt;/li&gt;
  &lt;li&gt;낮은 처리량 : 가용 쓰레드가 부족해서 처리량도 줄어든다.&lt;/li&gt;
  &lt;li&gt;교착상태 : 혹여 deadlock이 자주 발생하면 쓰레드 고갈이 문제일 수도 있다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;해결&quot;&gt;해결&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;비동기로 구성하기 : blocking 작업을 offload하고 다른 작업을 위한 쓰레드 확보할 수 있는 비동기 작업으로 구성하면 가용 리소스의 활용을 최고로 올릴 수 있다.&lt;/li&gt;
  &lt;li&gt;잠금 컨텐션 감소 : 동기화 메커니즘을 최적화하여 잠금 경합을 줄이고 쓰레드 고갈 가능성을 줄인다.&lt;/li&gt;
  &lt;li&gt;쓰레드 풀 조정 : 적정한 쓰레드 풀, 작업 큐로 원활한 작업 환경을 구성한다.&lt;/li&gt;
  &lt;li&gt;성능 모니터링, 분석&lt;/li&gt;
  &lt;li&gt;타임아웃 메커니즘 : 일정 시간이 지나면 실패로 처리해서 순환을 문제가 생겼을 경우 failover 할 수 있도록 둘 수도 있다.&lt;/li&gt;
  &lt;li&gt;리소스 액세스 최적화 : 공유 리소스 액세스 방식을 최적화하여 경합을 줄이는 방식으로 최적화할 수도 있다.&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Tue, 28 Jan 2025 00:00:00 +0900</pubDate>
      </item>
    
  </channel>
</rss>
